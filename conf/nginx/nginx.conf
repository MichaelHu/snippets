# 1. defines `user` and `group` credentials used by worker processes
#	user user [group];
# 2. defaults to `user nobody nobody;`
# user  nobody;

worker_processes  6;

# error_log  logs/error.log;
# error_log  logs/error.log  notice;
# error_log  logs/error.log  info;
# error_log  logs/error.log  debug;
# error_log	logs/nginx.log info;

# 1. define a file that will store the precess ID of the main process
# pid        logs/nginx.pid;

events {
    # use method;
    #
    # worker_aio_requests number;
    # worker_aio_requests 32;
    #
    # worker_connections number;
    worker_connections 1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';

    # access_log  logs/access.log  main;
    # access_log  logs/nginx-access.log;

    # Enables or disables the use of sendfile()
    # Starting from nginx 0.8.12 and FreeBSD 5.2.1, aio can be used 
    # to pre-load data for sendfile()
    sendfile        on;

    # tcp_nopush     on;


    # keepalive_timeout  0;
    keepalive_timeout  65;

    # Sets the maximum allowed size of the client request body, specified in the “Content-Length” request header field. If the size in a request exceeds the configured value, the 413 (Request Entity Too Large) error is returned to the client. Please be aware that browsers cannot correctly display this error. Setting size to 0 disables checking of client request body size.
    # Syntax:   client_max_body_size size;
    # Default:  client_max_body_size 1m;
    # Context:  http, server, location
    client_max_body_size 200m;

    gzip  on;
    gzip_types text/css application/javascript application/json;


    # Etag: default on
    etag on;

    # websocket proxy preparation
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }



    # Expires
    #
    # expires    24h;
    # expires    modified +24h;
    # expires    @24h;
    # expires    0;
    # expires    -1;
    # expires    epoch;
    #
    # map $sent_http_content_type $expires {
    #     default         off;
    #     application/pdf 42d;
    #     ~image/         max;
    # }
    # 
    # expires $expires;

    # server {
	# 	
	# 	# Listen Address or Port
	# 	# 1. listen port configuration  
    #     listen       8080;
	# 	# 2. can contain listen address
	# 	# listen	  192.168.1.1:80;
	# 	# 3. Default Server
	# 	# 	>= 0.8.21		default_server
	# 	# 	< 0.8.21		default
    #     # listen       8080 default_server;


	# 	# Server Names: <http://nginx.org/en/docs/http/server_names.html>
    #     # 1. Server names are defined using the server_name directive and determine 
    #     #   which server block is used for a given request
    #     # 2. the value can be exact names, wildcard names, or regular expressions
    #     # 3. the regular expressions used is compatible with PCRE, to use regular expression,
    #     #   the server name must start with the `~` ( tilde character )  
    #     # 4. A regular expression containing the character `{` and `}` should be quoted
    #     #   server_name "~^(?<name>\w\d{1,3})\.example\.net$";
    #     # 5. A named regular expression capture can be used later as a variable
    #     #   server {
    #     #       server_name  ~^(www\.)?(?<domain>.+)$;
    #     #       location / {
    #     #           root /sites/$domain;
    #     #       }
    #     #   }
	# 	# 6. if it is required to preocess requests without the `Host` header in a server block which
	# 	# 	is not the default, an empty name should be specified:
	# 	#   server {
	# 	#  		listen 80;
	# 	# 		server_name example.org www.example.org "";
	# 	# 		...
	# 	#  	} 
	# 	# 7. request using an IP address instead of a server name, the `Host` header field will
	# 	# 	contain the IP address, and the request can be handled using the IP address as 
	# 	#	the server name:
	# 	#	server {
	# 	# 		listen 80;
	# 	# 		server_name example.org
	# 	#					www.example.org
	# 	#					""
	# 	# 					192.168.1.1
	# 	#					;
	# 	# 		...
	# 	#	}
	# 	# 8. catch-all server, the strange name `_` can be seen:
	# 	#	server {
	# 	#		listen 80 default_server;
	# 	# 		server_name _;
	# 	#		return 444;
	# 	#	}
    #     server_name  fe.sophon.com;
    #     # server_name  example.org www.example.org;
    #     # server_name  *.example.org;
    #     # server_name "~^(?<name>\w\d{1,3})\.example\.net$";
    #     # server_name  ~^(?<user>.+)\.example\.net$;


	# 	# Document root
	# 	# 1. context: http, server, location
	# 	# 2. can be relative or absolute, defaults to `html`
    #     # root         /path/to/docroot;


    #     # charset koi8-r;


    #     # access_log  logs/host.access.log  main;


	# 	# Sets configuration depending on a request URI.
	# 	# 1. syntax: 
	# 	# 	location [ = | ~ | ~* | ^~ ] uri { ... }
	# 	# 	* prefix strings
	# 	#	* `=` - exact match prefix strings
	# 	#	* `^~` - to find location matching a given request, nginx first checks 
	# 	#		locations defined using the prefix strings (prefix locations). Among 
	# 	#		them, the location with the longest matching prefix is selected and remembered.
	# 	#		if the longest matching prefix location has the `^~` modifier 
	# 	#		, then regular expressions are not checked.
	# 	#	* `~` - case-sensitive regular expression
	# 	#	* `~*` - case-insensitive regular expression
	# 	#	* `!~` - no match case-sensitive regular expression
	# 	#	* `!~*` - no match case-insensitive regular expression
	# 	# 2. uri is a `normalized URI`, after
	# 	# 	* decoding the text encoded in the "%xx" form
	# 	# 	* resolving references to relative path components "." and ".."
	# 	# 	* possibole compression of two or more adjacent slashes into a single slash

    #     # regular expression
    #     location ~* \.(html|js|css|png|jpe?g|gif|ttf|woff2?|eot|svg)$ {
    #         # root   /Users/hudamin/projects/git/mydocs3/docs/math;
	# 		root /Users/hudamin/projects/sophon/SophonWeb/build;
    #     }

	# 	# prefix strings
	# 	location / {
    #         rewrite ^.*$ / break;
	# 		root /Users/hudamin/projects/sophon/SophonWeb/build;
    #         index index.html;
	# 	}

	# 	# prefix strings
	# 	location /api/ {
	# 		proxy_pass http://172.22.1.102/;
	# 	}

	# 	#
    #     # location / {
    #     #     root   html;
    #     #     index  index.html index.htm;
    #     # }

    #     # error_page  404              /404.html;

    #     # redirect server error pages to the static page /50x.html
	# 	#
    #     # error_page   500 502 503 504  /50x.html;
    #     # location = /50x.html {
    #     #     root   html;
    #     # }

    #     # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #     #
    #     # location ~ \.php$ {
    #     #    proxy_pass   http://127.0.0.1;
    #     # }

    #     # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #     #
    #     # location ~ \.php$ {
    #     #    root           html;
    #     #    fastcgi_pass   127.0.0.1:9000;
    #     #    fastcgi_index  index.php;
    #     #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #     #    include        fastcgi_params;
    #     # }

    #     # deny access to .htaccess files, if Apache's document root
    #     # concurs with nginx's one
    #     #
    #     # location ~ /\.ht {
    #     #    deny  all;
    #     # }
    # }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    # server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    # }


    # HTTPS server
    #
    # server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    # }

    include proxy/*;
}

